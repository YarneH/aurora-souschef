package com.aurora.souschef;

import android.arch.lifecycle.ViewModelProviders;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.aurora.souschefprocessor.recipe.Recipe;

import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Class defining the functionality of the recipe steps tab.
 */
public class Tab3Steps extends Fragment {
    private String[] mDescriptionSteps = null;
    private StepsPagerAdapter mStepsPagerAdapter;
    private ViewPager mViewPager;

    public Tab3Steps() {
        // Default constructor
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        View rootView = inflater.inflate(R.layout.tab_3_steps, container, false);

        Log.d("Test", "onCreateView " + this);
        // Create the adapter that will return a fragment for each of the three
        // primary sections of the activity.
        mStepsPagerAdapter = new StepsPagerAdapter(getChildFragmentManager());
        mViewPager = rootView.findViewById(R.id.vp_steps);

        RecipeViewModel mRecipe = ViewModelProviders.of(Objects.requireNonNull(this.getActivity())).get(RecipeViewModel.class);
        mRecipe.getRecipe().observe(this, recipe -> {
            if (recipe == null) {
                return;
            }
            mDescriptionSteps = extractDescriptionSteps(recipe);
            mViewPager.setAdapter(mStepsPagerAdapter);

        });

        // Set up the ViewPager with the sections adapter.

        // Prevent ViewPager from resetting timers
        // TODO: remove this when viewmodel is ready
//        mViewPager.setOffscreenPageLimit(mStepsPagerAdapter.getCount());

        return rootView;
    }

    /**
     * A placeholder fragment containing the view of a step of the recipe
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";
        private static final String ARG_NUMBER_OF_SECTIONS = "number_of_sections";
        private String[] mDescriptionStep;

        public PlaceholderFragment() {
            // Empty constructor (generated by Android Studio)
        }

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber, int amountSteps) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        @Override
        public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            int index = Objects.requireNonNull(getArguments()).getInt(ARG_SECTION_NUMBER);

            // Inflate a CardView with a step and get the View
            View rootView = inflater.inflate(R.layout.fragment_steps, container, false);
            TextView titleTextView = rootView.findViewById(R.id.tv_title);

            // Set the TextViews
            titleTextView.setText(getString(R.string.section_format, index + 1));

            // Add Text and Timer
            int timer_margin = Math.round(getResources().getDimension(R.dimen.timer_margin));
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            layoutParams.setMargins(0, timer_margin, 0, timer_margin);
            ViewGroup insertPoint = rootView.findViewById(R.id.ll_step);

            RecipeViewModel recipeViewModel = ViewModelProviders
                    .of(Objects.requireNonNull(getActivity()))
                    .get(RecipeViewModel.class);
            recipeViewModel.getRecipe().observe(this, recipe -> {
                if (recipe == null) {
                    return;
                }

                mDescriptionStep = extractDescriptionSteps(recipe);

                RecipeTimerViewModel recipeTimerViewModel = ViewModelProviders.of(getActivity()).get(RecipeTimerViewModel.class);
                recipeTimerViewModel.init(recipe);

                int beginOfTextBlock = 0;
                for (int i = 0; i < recipe.getRecipeSteps().get(index).getRecipeTimers().size(); i++) {
                    View timerCard = inflater.inflate(R.layout.timer_card, container, false);
                    TextView textView = (TextView) inflater.inflate(R.layout.step_textview, container, false);

                    // Set Timers correctly.
                    LiveDataTimer liveDataTimer = recipeTimerViewModel.getTimerInStep(index, i);
                    new UITimer(liveDataTimer, timerCard, this);

                    // Set TextViews
                    int endOfTextBlock = recipe.getRecipeSteps()
                            .get(index).getRecipeTimers()
                            .get(i).getPosition()
                            .getEndIndex();
                    String currentSubstring = mDescriptionStep[index].substring(beginOfTextBlock, endOfTextBlock);
                    Pattern p = Pattern.compile("\\p{Alpha}");
                    Matcher m = p.matcher(currentSubstring);
                    if (m.find()) {
                        textView.setText(currentSubstring.substring(m.start()));
                    }
                    beginOfTextBlock = endOfTextBlock;

                    // Add text and timers to the parent.
                    insertPoint.addView(textView);
                    insertPoint.addView(timerCard);
                }
                // Check if there is still some text coming after the last timer
                if (beginOfTextBlock != mDescriptionStep[index].length()) {
                    TextView textView = (TextView) inflater.inflate(R.layout.step_textview, container, false);
                    String currentSubstring = mDescriptionStep[index].substring(beginOfTextBlock);
                    Pattern p = Pattern.compile("\\p{Alpha}");
                    Matcher m = p.matcher(mDescriptionStep[index].substring(beginOfTextBlock));
                    if (m.find()) {
                        textView.setText(currentSubstring.substring(m.start()));
                    }
                    insertPoint.addView(textView);
                }
                // Add the ImageViews to the LinearLayout for the indicator dots
                LinearLayout linearLayout = rootView.findViewById(R.id.ll_dots);
                ImageView tempView;

                // For every step, add a dot and make sur the right one is selected
                for (int i = 0; i < recipe.getRecipeSteps().size(); i++) {
                    tempView = (ImageView) inflater.inflate(R.layout.dot_image_view, linearLayout, false);
                    if (i == index) {
                        tempView.setImageDrawable(ContextCompat.getDrawable(getContext(), R.drawable.selected_dot));
                    } else {
                        tempView.setImageDrawable(ContextCompat.getDrawable(getContext(), R.drawable.not_selected_dot));
                    }
                    linearLayout.addView(tempView);
                }
            });
            return rootView;
        }
    }

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the sections/tabs/pages.
     */
    public class StepsPagerAdapter extends FragmentPagerAdapter {

        public StepsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            // getItem is called to instantiate the fragment for the given page.
            // Return a PlaceholderFragment (defined as a static inner class below).
            Log.d(StepsPagerAdapter.class.getSimpleName(), "fragment position & count: " + position + ", " + getCount());
            return PlaceholderFragment.newInstance(position, getCount());
        }

        @Override
        public int getCount() {
            // Return total pages.
            if (mDescriptionSteps == null) {
                Log.d(Tab3Steps.class.getSimpleName(), "GetCount called");
                return 0;
            }
            return mDescriptionSteps.length;
        }
    }

    public static String[] extractDescriptionSteps(Recipe recipe) {
        int stepsCount = recipe.getRecipeSteps().size();
        String[] steps = new String[stepsCount];

        for (int i = 0; i < stepsCount; i++) {
            steps[i] = recipe.getRecipeSteps().get(i).getDescription();
        }
        return steps;
    }

}
