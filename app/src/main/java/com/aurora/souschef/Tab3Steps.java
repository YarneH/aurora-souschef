package com.aurora.souschef;

import android.arch.lifecycle.ViewModelProviders;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.aurora.souschefprocessor.recipe.Recipe;

import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Class defining the functionality of the recipe steps tab.
 */
public class Tab3Steps extends Fragment {
    /**
     * Array with the text in every step.
     */
    private String[] mDescriptionSteps = null;
    /**
     * Adapter for filling the different step cards.
     */
    private StepsPagerAdapter mStepsPagerAdapter;
    /**
     * Viewpager for swiping and navigating through the different cards.
     */
    private ViewPager mViewPager;

    /**
     * Default constructor. Is empty.
     */
    public Tab3Steps() {
        // Default constructor
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        View rootView = inflater.inflate(R.layout.tab_3_steps, container, false);
        // Create the adapter that will return a fragment for each of the three
        // primary sections of the activity.
        mStepsPagerAdapter = new StepsPagerAdapter(getChildFragmentManager());
        mViewPager = rootView.findViewById(R.id.vp_steps);

        RecipeViewModel mRecipe = ViewModelProviders
                .of(Objects.requireNonNull(this.getActivity()))
                .get(RecipeViewModel.class);
        mRecipe.getRecipe().observe(this, (Recipe recipe) -> {
            if (recipe == null) {
                return;
            }
            mDescriptionSteps = extractDescriptionSteps(recipe);
            mViewPager.setAdapter(mStepsPagerAdapter);

        });

        return rootView;
    }

    /**
     * A placeholder fragment containing the view of a step of the recipe
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";
        private View mRootView;
        private String[] mDescriptionStep;

        public PlaceholderFragment() {
            // Empty constructor (generated by Android Studio)
        }

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        @Override
        public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            int index = Objects.requireNonNull(getArguments()).getInt(ARG_SECTION_NUMBER);

            // Inflate a CardView with a step and get the View
            mRootView = inflater.inflate(R.layout.fragment_steps, container, false);
            TextView titleTextView = mRootView.findViewById(R.id.tv_title);

            // Set the TextViews
            titleTextView.setText(getString(R.string.section_format, index + 1));

            RecipeViewModel recipeViewModel = ViewModelProviders
                    .of(Objects.requireNonNull(getActivity()))
                    .get(RecipeViewModel.class);
            recipeViewModel.getRecipe().observe(this, (Recipe recipe) ->
                    this.onNewRecipeObserved(inflater, container, recipe, index));
            return mRootView;
        }

        /**
         * Helper method called when a new recipe is observed
         *
         * @param inflater  Layout inflater to inflate necessary layouts
         * @param container ViewGroup to inflate in.
         * @param recipe    The observed recipe
         * @param index     The index of the step.
         */
        private void onNewRecipeObserved(LayoutInflater inflater, ViewGroup container, Recipe recipe, int index) {
            if (recipe == null) {
                return;
            }
            mDescriptionStep = extractDescriptionSteps(recipe);

            ViewGroup insertPoint = mRootView.findViewById(R.id.ll_step);

            RecipeTimerViewModel recipeTimerViewModel = ViewModelProviders
                    .of(getActivity())
                    .get(RecipeTimerViewModel.class);
            recipeTimerViewModel.init(recipe);

            // Keep index of the beginning of a text block to know where to cut the text.
            int beginOfTextBlock = 0;
            // Run over all timers to place them correctly.
            for (int i = 0; i < recipe.getRecipeSteps().get(index).getRecipeTimers().size(); i++) {
                // New card for the timer.
                View timerCard = inflater.inflate(R.layout.timer_card, container, false);
                // New TextView for the recipe description.
                TextView textView = (TextView) inflater.inflate(R.layout.step_textview, container, false);

                // Get timer data in this step of the i'th timer.
                LiveDataTimer liveDataTimer = recipeTimerViewModel.getTimerInStep(index, i);
                // Make new timer-object. Is actually never used after this.
                new UITimer(liveDataTimer, timerCard, this);

                // Set TextViews
                // search for the next place to cut.
                int endOfTextBlock = recipe.getRecipeSteps()
                        .get(index).getRecipeTimers()
                        .get(i).getPosition()
                        .getEndIndex();
                // get the substring and place it in the TextView
                String currentSubstring = mDescriptionStep[index].substring(beginOfTextBlock, endOfTextBlock);
                Pattern p = Pattern.compile("\\p{Alpha}");
                Matcher m = p.matcher(currentSubstring);
                if (m.find()) {
                    textView.setText(currentSubstring.substring(m.start()));
                }
                // Update the text-block start to be at the beginning of the next piece.
                beginOfTextBlock = endOfTextBlock;

                // Add text and timers to the parent.
                insertPoint.addView(textView);
                insertPoint.addView(timerCard);
            }
            // Check if there is still some text coming after the last timer
            // Repeat.
            if (beginOfTextBlock != mDescriptionStep[index].length()) {
                TextView textView = (TextView) inflater.inflate(R.layout.step_textview, container, false);
                String currentSubstring = mDescriptionStep[index].substring(beginOfTextBlock);
                Pattern p = Pattern.compile("\\p{Alpha}");
                Matcher m = p.matcher(mDescriptionStep[index].substring(beginOfTextBlock));
                if (m.find()) {
                    textView.setText(currentSubstring.substring(m.start()));
                }
                insertPoint.addView(textView);
            }

            // Add dots
            this.addDots(inflater, recipe, index);

        }

        /**
         * Helper-class to add the navigation dots.
         *
         * @param inflater Layout inflater to inflate dot-views
         * @param recipe   used to get the amount of steps.
         * @param index    Index of the step, to see which dots to color.
         */
        private void addDots(LayoutInflater inflater, Recipe recipe, int index) {
            // Add the ImageViews to the LinearLayout for the indicator dots
            LinearLayout linearLayout = mRootView.findViewById(R.id.ll_dots);
            ImageView tempView;
            for (int i = 0; i < recipe.getRecipeSteps().size(); i++) {
                tempView = (ImageView) inflater.inflate(R.layout.dot_image_view, linearLayout, false);
                Drawable dot;
                if (i == index) {
                    dot = ContextCompat.getDrawable(getContext(),
                            R.drawable.selected_dot);
                } else {
                    dot = ContextCompat.getDrawable(getContext(),
                            R.drawable.not_selected_dot);
                }
                tempView.setImageDrawable(dot);
                linearLayout.addView(tempView);
            }
        }
    }

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the sections/tabs/pages.
     */
    public class StepsPagerAdapter extends FragmentPagerAdapter {

        public StepsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            // getItem is called to instantiate the fragment for the given page.
            // Return a PlaceholderFragment (defined as a static inner class below).
            return PlaceholderFragment.newInstance(position);
        }

        @Override
        public int getCount() {
            // Return total pages.
            if (mDescriptionSteps == null) {
                return 0;
            }
            return mDescriptionSteps.length;
        }
    }

    /**
     * Extracts the descriptions of the different steps.
     *
     * @param recipe where to extract the steps from.
     * @return Array with extracted descriptions. Holds as much elements as there are steps.
     */
    public static String[] extractDescriptionSteps(Recipe recipe) {
        int stepsCount = recipe.getRecipeSteps().size();
        String[] steps = new String[stepsCount];

        for (int i = 0; i < stepsCount; i++) {
            steps[i] = recipe.getRecipeSteps().get(i).getDescription();
        }
        return steps;
    }

}
