package com.aurora.souschef;

import android.arch.lifecycle.ViewModelProviders;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.aurora.souschefprocessor.recipe.Recipe;
import com.aurora.souschefprocessor.recipe.RecipeTimer;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Class defining the functionality of the recipe steps tab.
 */
public class Tab3Steps extends Fragment {
    private RecipeViewModel mRecipe = null;
    private String[] mDescriptionSteps = null;
    private StepsPagerAdapter mStepsPagerAdapter;
    private ViewPager mViewPager;

    public Tab3Steps() {
        // Default constructor
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        View rootView = inflater.inflate(R.layout.tab_3_steps, container, false);

        Log.d("Test", "onCreateView " + this);
        // Create the adapter that will return a fragment for each of the three
        // primary sections of the activity.
        mStepsPagerAdapter = new StepsPagerAdapter(getActivity().getSupportFragmentManager());
        mViewPager = rootView.findViewById(R.id.vp_steps);

        mRecipe = ViewModelProviders.of(getActivity()).get(RecipeViewModel.class);
        mRecipe.getRecipe().observe(this, recipe -> {
            if (recipe == null) {
                return;
            }
            Log.d("tset", "viewpager set");
            mDescriptionSteps = extractDescriptionSteps(recipe);
            mViewPager.setAdapter(mStepsPagerAdapter);

        });

        // Set up the ViewPager with the sections adapter.

        // Prevent ViewPager from resetting timers
        // TODO: remove this when viewmodel is ready
//        mViewPager.setOffscreenPageLimit(mStepsPagerAdapter.getCount());

        return rootView;
    }

    /**
     * A placeholder fragment containing the view of a step of the recipe
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";
        private int mAmountSteps = 0;
        private String[] descriptionStep;

        public PlaceholderFragment() {
            // Empty constructor (generated by Android Studio)
        }

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber, int amountSteps) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            fragment.mAmountSteps = amountSteps;
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            Log.d(this.getClass().getSimpleName(), "onCreateView");
            int index = getArguments().getInt(ARG_SECTION_NUMBER);

            // Inflate the CardView and get the View
            View rootView = inflater.inflate(R.layout.fragment_steps, container, false);
            TextView titleTextView = rootView.findViewById(R.id.tv_title);

            // Set the TextViews
            titleTextView.setText(getString(R.string.section_format, index + 1));

            // Add Text and Timer
            int timer_margin = Math.round(getResources().getDimension(R.dimen.timer_margin));
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            layoutParams.setMargins(0, timer_margin, 0, timer_margin);
            ViewGroup insertPoint = (ViewGroup) rootView.findViewById(R.id.ll_step);

            RecipeViewModel recipeViewModel = ViewModelProviders.of(getActivity()).get(RecipeViewModel.class);
            recipeViewModel.getRecipe().observe(this, recipe -> {
                if (recipe == null) {
                    return;
                }

                descriptionStep = extractDescriptionSteps(recipe);

                int currentPosition = 0;
                for (RecipeTimer timer : recipe.getRecipeSteps().get(index).getRecipeTimers()) {
                    // Inflate the layout of a text and a timer
                    View timerView = inflater.inflate(R.layout.timer_card, null);
                    TextView textView = (TextView) inflater.inflate(R.layout.step_textview, null);

                    // Set Text of the TextView
                    int tempPosition = timer.getPosition().getEndIndex();
                    String currentSubstring = descriptionStep[index].substring(currentPosition, tempPosition);
                    Pattern p = Pattern.compile("\\p{Alpha}");
                    Matcher m = p.matcher(currentSubstring);
                    if (m.find()) {
                        textView.setText(currentSubstring.substring(m.start()));
                    }

                    // Create a UITimer and set its on click listeners
                    UITimer uiTimer = new UITimer(timer, timerView.findViewById(R.id.tv_timer));
                    uiTimer.setOnClickListeners();

                    // Add the timer to the LinearLayout
                    insertPoint.addView(textView, insertPoint.getChildCount(), layoutParams);
                    insertPoint.addView(timerView, insertPoint.getChildCount(), layoutParams);

                    // Set the current position to the temporary position
                    currentPosition = tempPosition;
                }
                // Check if there is still some text coming after the last timer
                if (currentPosition != descriptionStep[index].length()) {
                    TextView textView = (TextView) inflater.inflate(R.layout.step_textview, null);
                    String currentSubstring = descriptionStep[index].substring(currentPosition);
                    Pattern p = Pattern.compile("\\p{Alpha}");
                    Matcher m = p.matcher(descriptionStep[index].substring(currentPosition));
                    if (m.find()) {
                        textView.setText(currentSubstring.substring(m.start()));
                    }

                    insertPoint.addView(textView, insertPoint.getChildCount(), layoutParams);
                }

            });


            // Add the ImageViews to the LinearLayout for the indicator dots
            int dots_margin = Math.round(getResources().getDimension(R.dimen.dots_margin));
            LinearLayout linearLayout = rootView.findViewById(R.id.ll_dots);
            ImageView tempView;
            LinearLayout.LayoutParams layoutParamsDot = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            layoutParamsDot.setMargins(dots_margin, dots_margin,
                    dots_margin, dots_margin);

            // For every step, add a dot and make sur the right one is selected
            for (int i = 0; i < mAmountSteps; i++) {
                tempView = (ImageView) inflater.inflate(R.layout.dot_image_view, null);
                if (i == index) {
                    tempView.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_dot));
                } else {
                    tempView.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.not_selected_dot));
                }
                tempView.setLayoutParams(layoutParamsDot);
                linearLayout.addView(tempView);
            }
            return rootView;
        }
    }

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the sections/tabs/pages.
     */
    public class StepsPagerAdapter extends FragmentPagerAdapter {

        public StepsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            // getItem is called to instantiate the fragment for the given page.
            // Return a PlaceholderFragment (defined as a static inner class below).
            return PlaceholderFragment.newInstance(position, getCount());
        }

        @Override
        public int getCount() {
            // Return total pages.
            if (mDescriptionSteps == null) {
                Log.d(Tab3Steps.class.getSimpleName(), "GetCount called");
                return 0;
            }
            return mDescriptionSteps.length;
        }
    }

    public static String[] extractDescriptionSteps(Recipe recipe) {
        int stepsCount = recipe.getRecipeSteps().size();
        String[] steps = new String[stepsCount];

        for (int i = 0; i < stepsCount; i++) {
            steps[i] = recipe.getRecipeSteps().get(i).getDescription();
        }
        return steps;
    }
}
